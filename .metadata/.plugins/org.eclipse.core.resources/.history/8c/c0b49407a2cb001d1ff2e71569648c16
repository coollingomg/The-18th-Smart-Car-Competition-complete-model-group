/*
 * uart.h
 *
 *  Created on: 2023年3月18日
 *      Author: 开心就好
 */
#ifndef CODE_UART_UART_H_
#define CODE_UART_UART_H_

//包含头文件
#include "zf_driver_uart.h"
#include <stdarg.h>
#include "cpu0_main.h"

//宏定义蓝牙串口引脚
#define uart_booluteeth_pin_tx      14      //UART2_TX_P10_5
#define uart_booluteeth_pin_rx      10      //UART2_RX_P10_6
//宏定义蓝牙使用的串口
#define bluetooth_using_uart        2       //UART_2
//宏定义蓝牙使用串口的波特率
#define bluetooth_using_uart_baud   9600


//宏定义串口信息接收方式,1为使用蓝牙；0为使用上位机接收数据
#define USING_BLUETOOTH_OR_EGBOARD     1

//宏定义通信协议格式
#ifdef USING_BLUETOOTH_OR_EGBOARD
    //定义帧头
    #define DATA_PEAK_HEAD              0xa5
    //定义帧尾
    #define DATA_PEAK_TAIL              0x5a
    //通信序列字节长度
    #define UART_FRAME_LEN              23
#else
    //通信序列字节最长长度
    #define USB_FRAME_LENMAX            30
#endif


//串口蓝牙调试数据结构体
typedef struct
{
    bool  receiveStart;                                     //数据接收开始
    uint8 receiveIndex;                                     //接收序列
    bool  receiveFinished;                                  //数据队列接收并校验完成
    uint8 data_verity;                                      //数据校验位
    uint8 receiveBuff[UART_FRAME_LEN];                      //数据接收队列

    float data_Kp;                                          //数据kp
    float data_Ki;                                          //数据ki
    float data_Kd;                                          //数据kd
    float data_speed;                                       //数据―>速度
    float data_angle;                                       //数据->角度
}BlueTooth_data_recevie_Struct;

//声明蓝牙数据结构体
extern BlueTooth_data_recevie_Struct Bluetooth_data;

//==================================================UART 基础函数==================================================
void my_uart_init       (uart_index_enum uartn, uint32 baud, uart_tx_pin_enum tx_pin, uart_rx_pin_enum rx_pin);
void Bluetooth_Send     (char *string, ...);
//==================================================UART 基础函数==================================================


#endif /* CODE_UART_UART_H_ */
