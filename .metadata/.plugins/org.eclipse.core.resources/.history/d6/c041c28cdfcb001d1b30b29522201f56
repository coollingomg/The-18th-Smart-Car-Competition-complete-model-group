#include "zf_common_headfile.h"
#include "isr_config.h"
#pragma section all "cpu0_dsram"
// 将本语句与#pragma section all restore语句之间的全局变量都放在CPU0的RAM中
// 对于TC系列默认是不支持中断嵌套的，希望支持中断嵌套需要在中断内使用 interrupt_global_enable(0); 来开启中断嵌套
// 简单点说实际上进入中断后TC系列的硬件自动调用了 interrupt_global_disable(); 来拒绝响应任何的中断，因此需要我们自己手动调用 interrupt_global_enable(0); 来开启中断的响应。


//包含头文件
#include "icm20602_data_handle.h"
#include "motor/motor.h"
#include "servo/servo.h"
#include "pid.h"
#include "uart.h"


//----------------------------------代码区域----------------------------------
int core0_main(void)
{
    clock_init();                   // 获取时钟频率<务必保留>
    debug_init();                   // 初始化默认调试串口

//----------------------------------此处编写用户代码 例如外设初始化代码等----------------------------------
    //陀螺仪任务初始化
    icm20602_pose_init();
    //串口通信初始化
#ifdef USING_BLUETOOTH_OR_EGBOARD
    //使用蓝牙通信
    my_uart_init(bluetooth_using_uart, bluetooth_using_uart_baud, uart_booluteeth_pin_tx, uart_booluteeth_pin_rx);
#else
    //与eb通信
    my_uart_init(eb_using_uart, bluetooth_using_uart_baud, uart_booluteeth_pin_tx, uart_booluteeth_pin_rx);
#endif
    //电机初始化
    motor_init();
    //舵机初始化
    servo_init();
    //等待数据接收完成
    while(!Bluetooth_data.receiveFinished);
    //点灯，说明数据接收完成
    gpio_init(P20_9, GPO, 0, GPO_PUSH_PULL);
    //获取pid参数
    float pid_data[3] = {Bluetooth_data.data_Kp, Bluetooth_data.data_Ki, Bluetooth_data.data_Kd};
    //pid初始化
    PID_Init(&car_speed_pid, PID_POSITION, pid_data, CAR_MAX_SPEED,CAR_IMAX_OUT);
//----------------------------------此处编写用户代码 例如外设初始化代码等----------------------------------

    cpu_wait_event_ready();         // 等待所有核心初始化完毕
    while (TRUE)
    {

//----------------------------------此处编写需要循环执行的代码----------------------------------
        //开始闪灯，说明全部初始化完成
        gpio_toggle_level(P20_8);
        system_delay_ms(500);
        //串口发送数据
        //Bluetooth_Send("%f,%f,%f",Gyroscope_attitude_Angle_data_get.roll,Gyroscope_attitude_Angle_data_get.pitch,Gyroscope_attitude_Angle_data_get.yaw);
        //Bluetooth_Send("%f,%f",Bluetooth_data.data_angle, Bluetooth_data.data_speed);
//----------------------------------此处编写需要循环执行的代码----------------------------------

    }
}

#pragma section all restore
//----------------------------------代码区域----------------------------------

